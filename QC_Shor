{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ge96lip/Quantum-Computing/blob/main/QC_Shor\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G7JX6HO5oTTx"
      },
      "source": [
        "# Prerequisites"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7FCxCNWiOsMv",
        "outputId": "04ed87df-1a61-4c80-c083-f40419e72e75"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting qiskit\n",
            "  Downloading qiskit-1.2.4-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\n",
            "Collecting rustworkx>=0.15.0 (from qiskit)\n",
            "  Downloading rustworkx-0.15.1-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (9.9 kB)\n",
            "Requirement already satisfied: numpy<3,>=1.17 in /usr/local/lib/python3.10/dist-packages (from qiskit) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.5 in /usr/local/lib/python3.10/dist-packages (from qiskit) (1.13.1)\n",
            "Requirement already satisfied: sympy>=1.3 in /usr/local/lib/python3.10/dist-packages (from qiskit) (1.13.1)\n",
            "Collecting dill>=0.3 (from qiskit)\n",
            "  Downloading dill-0.3.9-py3-none-any.whl.metadata (10 kB)\n",
            "Requirement already satisfied: python-dateutil>=2.8.0 in /usr/local/lib/python3.10/dist-packages (from qiskit) (2.8.2)\n",
            "Collecting stevedore>=3.0.0 (from qiskit)\n",
            "  Downloading stevedore-5.3.0-py3-none-any.whl.metadata (2.3 kB)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from qiskit) (4.12.2)\n",
            "Collecting symengine<0.14,>=0.11 (from qiskit)\n",
            "  Downloading symengine-0.13.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (1.2 kB)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.0->qiskit) (1.16.0)\n",
            "Collecting pbr>=2.0.0 (from stevedore>=3.0.0->qiskit)\n",
            "  Downloading pbr-6.1.0-py2.py3-none-any.whl.metadata (3.4 kB)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy>=1.3->qiskit) (1.3.0)\n",
            "Downloading qiskit-1.2.4-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.8/4.8 MB\u001b[0m \u001b[31m19.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dill-0.3.9-py3-none-any.whl (119 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m119.4/119.4 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading rustworkx-0.15.1-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m14.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading stevedore-5.3.0-py3-none-any.whl (49 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m49.7/49.7 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading symengine-0.13.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (49.7 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m49.7/49.7 MB\u001b[0m \u001b[31m16.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pbr-6.1.0-py2.py3-none-any.whl (108 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m108.5/108.5 kB\u001b[0m \u001b[31m3.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: symengine, rustworkx, pbr, dill, stevedore, qiskit\n",
            "Successfully installed dill-0.3.9 pbr-6.1.0 qiskit-1.2.4 rustworkx-0.15.1 stevedore-5.3.0 symengine-0.13.0\n",
            "Collecting pylatexenc\n",
            "  Downloading pylatexenc-2.10.tar.gz (162 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m162.6/162.6 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: pylatexenc\n",
            "  Building wheel for pylatexenc (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pylatexenc: filename=pylatexenc-2.10-py3-none-any.whl size=136816 sha256=cecbf8c92e04020a92b8f6641a039f7fcc6d000ab5bd12cb8756abb6b21ccd68\n",
            "  Stored in directory: /root/.cache/pip/wheels/d3/31/8b/e09b0386afd80cfc556c00408c9aeea5c35c4d484a9c762fd5\n",
            "Successfully built pylatexenc\n",
            "Installing collected packages: pylatexenc\n",
            "Successfully installed pylatexenc-2.10\n",
            "Collecting qiskit_aer\n",
            "  Downloading qiskit_aer-0.15.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (8.0 kB)\n",
            "Requirement already satisfied: qiskit>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from qiskit_aer) (1.2.4)\n",
            "Requirement already satisfied: numpy>=1.16.3 in /usr/local/lib/python3.10/dist-packages (from qiskit_aer) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.10/dist-packages (from qiskit_aer) (1.13.1)\n",
            "Requirement already satisfied: psutil>=5 in /usr/local/lib/python3.10/dist-packages (from qiskit_aer) (5.9.5)\n",
            "Requirement already satisfied: rustworkx>=0.15.0 in /usr/local/lib/python3.10/dist-packages (from qiskit>=1.1.0->qiskit_aer) (0.15.1)\n",
            "Requirement already satisfied: sympy>=1.3 in /usr/local/lib/python3.10/dist-packages (from qiskit>=1.1.0->qiskit_aer) (1.13.1)\n",
            "Requirement already satisfied: dill>=0.3 in /usr/local/lib/python3.10/dist-packages (from qiskit>=1.1.0->qiskit_aer) (0.3.9)\n",
            "Requirement already satisfied: python-dateutil>=2.8.0 in /usr/local/lib/python3.10/dist-packages (from qiskit>=1.1.0->qiskit_aer) (2.8.2)\n",
            "Requirement already satisfied: stevedore>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from qiskit>=1.1.0->qiskit_aer) (5.3.0)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from qiskit>=1.1.0->qiskit_aer) (4.12.2)\n",
            "Requirement already satisfied: symengine<0.14,>=0.11 in /usr/local/lib/python3.10/dist-packages (from qiskit>=1.1.0->qiskit_aer) (0.13.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.0->qiskit>=1.1.0->qiskit_aer) (1.16.0)\n",
            "Requirement already satisfied: pbr>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from stevedore>=3.0.0->qiskit>=1.1.0->qiskit_aer) (6.1.0)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy>=1.3->qiskit>=1.1.0->qiskit_aer) (1.3.0)\n",
            "Downloading qiskit_aer-0.15.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.3/12.3 MB\u001b[0m \u001b[31m90.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: qiskit_aer\n",
            "Successfully installed qiskit_aer-0.15.1\n"
          ]
        }
      ],
      "source": [
        "!pip install qiskit\n",
        "!pip install pylatexenc\n",
        "!pip install qiskit_aer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XLGbMU4ZPFui"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "# Function to plot circle notation\n",
        "def plot_circle_notation(statevector, n_qubits, title='Quantum State'):\n",
        "    n_states = len(statevector)\n",
        "    # Compute amplitude and phase\n",
        "    amplitudes = np.abs(statevector)\n",
        "    phases = np.angle(statevector)\n",
        "    # Visualization parameters\n",
        "    rows = int(np.ceil(n_states / 8.0))\n",
        "    cols = min(n_states, 8)\n",
        "    fig, axs = plt.subplots(rows, cols, figsize=(2*cols, 2*rows))\n",
        "    axs = np.atleast_1d(axs)  # Ensure axs is iterable\n",
        "    for idx in range(n_states):\n",
        "        row = idx // cols\n",
        "        col = idx % cols\n",
        "        amp = amplitudes[idx]\n",
        "        phase = phases[idx]\n",
        "        # Create circles\n",
        "        circleExt = patches.Circle((0.5, 0.5), 0.5, color='gray', alpha=0.1)\n",
        "        circleInt = patches.Circle((0.5, 0.5), amp/2, color='b', alpha=0.3)\n",
        "        ax = axs[col] if rows == 1 else axs[row, col]\n",
        "        ax.add_patch(circleExt)\n",
        "        ax.add_patch(circleInt)\n",
        "        ax.set_aspect('equal')\n",
        "        state_number = \"|\" + format(idx, '0' + str(n_qubits) + 'b') + \">\"\n",
        "        ax.set_title('\\n' + state_number + '\\n')\n",
        "        xl = [0.5, 0.5 + 0.5 * amp * np.cos(phase + np.pi/2)]\n",
        "        yl = [0.5, 0.5 + 0.5 * amp * np.sin(phase + np.pi/2)]\n",
        "        ax.plot(xl, yl, 'r')\n",
        "        ax.axis('off')\n",
        "    plt.suptitle(title)\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M5GLZeFqoZyZ"
      },
      "source": [
        "# Bonus Exercise I - Quantum Escape Room with Grover’s Algorithm"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LsT1jkAQPtpb"
      },
      "source": [
        "## Task B1.1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "iHLJ0ivmNpKk",
        "outputId": "62031b1d-54dc-4a90-a0a7-41c9967d0e34"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 203.885x367.889 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAALAAAAEvCAYAAADl8Et8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAASLUlEQVR4nO3df0zV973H8edBi4AcVhEsIiKipQIKJDI3vGs7Wt3KLKu9XRsT45qF5qbZvJrMeO5+pOna3ZSSmibz+o/NXNZ5My+ua5sqNd1d/MWYWixlMUDllhQjP75rzqRFfipw7h+rROpR4Xg457wPr0fSP+T747xjn3746Dmc4/L5fD5EjIoJ9wAid0IBi2kKWExTwGKaAhbTFLCYpoDFNAUspilgMU0Bi2kKWExTwGKaAhbTFLCYpoDFNAUspilgMU0Bi2kKWExTwGKaAhbTFLCYpoDFNAUspilgMU0Bi2kKWExTwGKaAhbTFLCYpoDFNAUspilgMU0Bi2kKWExTwGKaAhbTZod7APHP5/PB8HC4x5i8OXNwuVwhf1gFHKmGhxl56ulwTzFpsw++DnFxIX9cbSHENAUspilgMU0Bi2kKWExTwGKaAhbTFLCYpoDFNAUspilgMU0Bi2kKWEybEQF7vV48Hg/Lly8nLi6OxYsXs337dvr7+6moqMDlcrFnz55wjykBiPqXUzY2NlJWVobjOMydO5e8vDy6urrYvXs3bW1tXLp0CYCioqLwDjpNTng/Zf2p47ycV8CPl63we07soYN8Z8FC3v7a/SGe7s5F9Qrs9XopLy/HcRx27NhBd3c3DQ0NOI5DVVUVNTU11NfX43K5KCgoCPe4EoCoDnjbtm10dHSwdetWdu3ahdvtHj/m8XgoLCxkZGSErKwskpKSwjipBCpqA25paaG6upqUlBQqKyv9nrN69WoACgsLJ3z9k08+4bvf/S5ut5t58+bx/e9/n3/84x/TPrNMXdTugQ8cOMDY2BibN28mMTHR7znx8fHAxIAvX75MaWkpycnJHDhwgMHBQTweD48++ih1dXXExNj8Mz8wOorX0s/YTVLUBnz06FEASktLb3pOR0cHMDHg1157jc7OTk6ePElmZiYAGRkZrF27lnfeeYeNGzdO39DT6MXzTbx4vincYwRd1AZ84cIFAJYsWeL3+MjICHV1dcDEgA8fPsw3vvGN8XgBSkpKyM7O5tChQwEFXFxcjOM4U7omPiaG5qKSKT/WzTyTmc0T6Yv9His7feKO75+Tk8Pg2FjA16elpXH27NkpXxe1Aff39wMwODjo93h1dTVerxe3283SpUvHv97c3MyTTz55w/n5+fk0NzcHNIvjOHR2dk7pmoRZs6AooIfza3liIg+n3hO8G35JV1cXA6Oj03b/m4nagNPS0ujp6aGhoYGSkokrWXd3Nzt37gSgoKBgwvsZ9PT0cPfdd99wv+TkZM6fPx/wLFMVb2yvnZ6efscrcCCiNuB169bR0tJCVVUV69evJycnB4D6+nq2bNmC1+sFQvMERiDfGn1DQ6beF6K1tRWX3hcieDweD/Pnz+fixYvk5+ezatUq7r33XtasWUN2djYPPfQQcOM/oc2bN4/PPvvshvtdunSJ5OTkUIwuUxC1AWdkZFBbW8uGDRuIi4ujvb2d5ORk9u7dS01NDa2trcCNAefm5vrd6zY3N5ObmxuS2WXyonYLAf+M8fDhwzd8va+vj/b2dmJiYli5cuWEY48++ig/+9nP6OjoICMjA4AzZ87Q1tbGK6+8EpK5ZfJcPp/PF+4hQu3MmTN8/etf57777uOjjz6acKy3t5dVq1aRkpLCCy+8wNDQEB6Ph9TUVE6dOhWyJzKs7YFnH3xde+BQOXfuHHDj9gEgKSmJo0ePsnDhQjZt2sQzzzzD2rVrOXz4sNln4aJZVG8hbuZWAQMsW7bM79ZDIs+MXFJuF7DYMSNX4GuvkxD7ZuQKLNFDAYtpClhMU8BimgIW0xSwmKaAxTQFLKYpYDFNAYtpClhMm5GvB7ZAH/Y9OQpYTNMWQkxTwGKaAhbTFLCYpoDFNAUspilgMU0Bi2kKWExTwGKaAhbTFLCYpoDFNAUspilgMU0Bi2kKWExTwGLajHx/YAv0M3GTo4Aj1fCwuQ95QR/yIjI1ClhMU8BimgIW0xSwmKaAxTQFLKYpYDFNAYtpClhMU8BimgIW02ZEwF6vF4/Hw/Lly4mLi2Px4sVs376d/v5+KioqcLlc7NmzJ9xjSgCi/tVojY2NlJWV4TgOc+fOJS8vj66uLnbv3k1bWxuXLl0CoKioKLyDTpMT3k9Zf+o4L+cV8ONlK/yeE3voIN9ZsJC3v3Z/iKe7c1G9Anu9XsrLy3Echx07dtDd3U1DQwOO41BVVUVNTQ319fW4XC4KCgrCPa4EIKoD3rZtGx0dHWzdupVdu3bhdrvHj3k8HgoLCxkZGSErK4ukpKQwTiqBitqAW1paqK6uJiUlhcrKSr/nrF69GoDCwsLxr10Lfs2aNcwJ008ZyORF7R74wIEDjI2NsXnzZhITE/2eEx8fD0wM+OOPP+aPf/wjX/3qV4mNjaWuri4k8063gdFRvJZ+RGmSojbgo0ePAlBaWnrTczo6OoCJAT/wwAN0d3cD8Itf/CJqAn7xfBMvnm8K9xhBF7UBX7hwAYAlS5b4PT4yMjIe5/UBx8RE567qmcxsnkhf7PdY2ekTIZ4meKI24P7+fgAGBwf9Hq+ursbr9eJ2u1m6dOm0zlJcXIzjOFO6Jj4mhuaikqDNsDwxkYdT7wna/b4sJyeHwbGxgK9PS0vj7NmzU74uagNOS0ujp6eHhoYGSkomhtDd3c3OnTsBKCgomPa/qDmOQ2dn55SuSZg1C4qmZ57p0NXVxcDoaMgfN2oDXrduHS0tLVRVVbF+/XpycnIAqK+vZ8uWLXi9XiA0T2CkpaVN+Zp4Y1uZ9PT0O16BAxG1AXs8Hn7/+99z8eJF8vPzWbFiBUNDQ3z88ceUlZWRlZXFe++9N2H/O10C+dboGxoy9b4Qra2tuPS+EMGTkZFBbW0tGzZsIC4ujvb2dpKTk9m7dy81NTW0trYChCRgmT5RuwID5Obmcvjw4Ru+3tfXR3t7OzExMaxcuTIMk0mwRHXAN9PU1ITP5yMnJ4eEhIQbjr/xxhsANDc3T/h1VlYWxcXFoRs0CB5MWcCV8qduec7tjkeyGRnwuXPngJtvH5588km/v3766af57W9/O62zydQoYD98Pl8ox5E7ELV/ibuV2wUsdszIFfja6yTEvhm5Akv0UMBimgIW0xSwmKaAxTQFLKYpYDFNAYtpClhMU8BimgIW0xSwmOby6bWDEUkf9j05ClhM0xZCTFPAYpoCFtMUsJimgMU0BSymKWAxTQGLaQpYTFPAYpoCFtMUsJimgMU0BSymKWAxTQGLaQpYTJuR7w9sgX6kaHIUcKQaHjb1OXGzD74O+pw4kalRwGKaAhbTFLCYpoDFNAUspilgMU0Bi2kKWExTwGKaAhbTFLCYpoDFtBkRsNfrxePxsHz5cuLi4li8eDHbt2+nv7+fiooKXC4Xe/bsCfeY0+KE91NiDx3k1baPbnpO7KGDbDxTG8KpgifqX07Z2NhIWVkZjuMwd+5c8vLy6OrqYvfu3bS1tXHp0iUAioqKwjuoBCSqV2Cv10t5eTmO47Bjxw66u7tpaGjAcRyqqqqoqamhvr4el8tFQUFBuMeVAER1wNu2baOjo4OtW7eya9cu3G73+DGPx0NhYSEjIyNkZWWRlJQUxkklUFEbcEtLC9XV1aSkpFBZWen3nNWrVwNQWFg4/rU33niDJ554giVLlpCQkMCKFSv4+c9/Tl9fX0jmni4Do6N4h4f9/mdZ1O6BDxw4wNjYGJs3byYxMdHvOfHx8cDEgHft2kVmZiYvvfQSGRkZNDY28sILL3DixAlOnjxJTIzNP/Mvnm/ixfNN4R4j6KI24KNHjwJQWlp603M6OjqAiQEfOnSI1NTU8V8/+OCDpKamsnnzZv7yl7/wwAMPTNPE0+uZzGyeSF/s91jZ6RMhniZ4ojbgCxcuALBkyRK/x0dGRqirqwMmBnx9vNcUFxcD0NnZGdAsxcXFOI4zpWviY2JoLioJ6PH8WZ6YyMOp9wTtfl+Wk5PD4NhYwNenpaVx9uzZKV8XtQH39/cDMDg46Pd4dXU1Xq8Xt9vN0qVLb3mvY8eOAZCbmxvQLI7jTDn+hFmzoCighwuLrq4uBkZHQ/64URtwWloaPT09NDQ0UFIycSXr7u5m586dABQUFNzy/Qw6Ozt57rnneOSRRwL+t+K0tLQpXxNvbK+dnp5+xytwIKI24HXr1tHS0kJVVRXr168nJycHgPr6erZs2YLX6wVu/QRGX18fjz32GLGxsfzmN78JeJZAvjX6hoZMvS9Ea2srLr0vRPB4PB7mz5/PxYsXyc/PZ9WqVdx7772sWbOG7OxsHnroIWDi/vd6g4ODlJeX88knn/CnP/2JhQsXhnJ8maSoDTgjI4Pa2lo2bNhAXFwc7e3tJCcns3fvXmpqamhtbQX8B3z16lW+973vcfbsWY4cOUJeXl6ox5dJmpGfVt/X10dSUhIul4vLly+TkJAwfmxsbIxNmzbxzjvv8O67746v1KFmbQsx++DrYdlCRO0e+Faamprw+Xzk5ORMiBfgRz/6EX/4wx/4yU9+QkJCAqdPnx4/tmzZMr//zCbhE7VbiFs5d+4c4H/7cOTIEQBefvllSkpKJvxXU1MT0jnl9mbkCnyrgNvb20M8jdwJrcBi2oxcga+9TkLsm5ErsEQPBSymKWAxTQGLaQpYTFPAYpoCFtMUsJimgMU0BSymKWAxbUa+oN0Cfdj35ChgMU1bCDFNAYtpClhMU8BimgIW0xSwmKaAxTQFLKYpYDFNAYtpClhMU8BimgIW0xSwmKaAxTQFLKYpYDFNAYtpClhMU8BimgIW0xRwBNi/fz+rV69m3rx5xMfHk5uby6uvvop+YPz2ZuRnZESaBQsW8Nxzz3HfffcxZ84camtr+eEPf8isWbPYvn17uMeLaHpfiAj1+OOPA/DWW2+FeZLIpi1EhPH5fLz//vvU1dVRWloa7nEinrYQEeLzzz9n0aJFXLlyhbGxMZ5//nm2bdsW7rEingKOEG63m8bGRgYGBvjrX//KT3/6U9LT06moqAj3aBFNe+AIVVlZya9+9Sscxwn3KBFNe+AINTY2xtDQULjHiHjaQkSA559/nvvvv5/s7GyuXr3KyZMnqaqq4gc/+EG4R4t4CjgC9Pb28uyzz9LZ2UlcXBzZ2dlUVlby7LPPhnu0iKc9sJimPbAxF7s/ZWDI0Du3TzNtIQwZGR3lv9/6X4aGr1Dx1HfIXHRPuEcKO63AXzI6Osr+/fv51re+RWpqKnPmzCEzM5NHHnmEX//614yOjoZttg/Onefzy/3Ext7FwgXzwzZHJNEe+Dq9vb1s3LiRY8eOAZCens6iRYvo6uqiq6sLn89HT08Pd999d8hnGxkd5ZW9/8Pnl/spf3gt/1K8MuQzRCJtIa5TUVHBsWPHyMjI4He/+92E1yL8/e9/Z9++fdx1111hme3a6utOTGBN4YqwzBCJtAJ/4YMPPqC4uJjZs2fz4YcfsnJl8Fa4/3r9TS73Dd7BHXxc7h/E5/MRNyeW2DD9IZpO7sR4/v3pf53ydVqBv/D2228DsGHDhqDGC3C5b5Devv6g3Gto+ApDw1eCcq9ooIC/0NzcDEBJSUnQ7+1OjL+Dq6N/9YXAf48U8Bd6e3sB+MpXvhL0ewfyrfGaM40tvPVeLe7EBDz/tom77tL/suvpd+MLSUlJwD9flxtsge+B/7n6Aly9OsIrr1UHd7AIoj3wHcrPz+fNN9/k1KlTQb93MPbA2vv6p4C/8Pjjj/PLX/6Sd999l+bmZvLy8oJ278D2dzNj73tNwH9P8Mm4p556ygf4MjMzfcePH59wzHEc30svveTr6+sLySynP2z2/cfLe33/uWe/78qVqyF5TIv078DX6e3t5bHHHuP48eMALFq0iPT0dLq7u+ns7AzZM3Ejo6Pseq2az3r79Kzbbei1ENdJSkriz3/+M/v27eOb3/wmAwMD/O1vfyMmJoZvf/vb7Nu3D7fbPe1zfHCulc96+/Ss2yRoBY5AHzb9H0eOv8+DXyvU6nsbCjhCXR0ZwYWL2bNnhXuUiKaAxTTtgcU0BSymKWAxTQGLaQpYTFPAYpoCFtMUsJimgMU0BSymKWAxTQGLaQpYTFPAYpoCFtMUsJimgMU0BSymKWAxTQGLaQpYTFPAYpoCFtMUsJimgMU0BSymKWAxTQGLaQpYTFPAYpoCFtMUsJimgMU0BSymKWAxTQGLaQpYTFPAYpoCFtP+H+WKJaHcU8eOAAAAAElFTkSuQmCC\n"
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "from qiskit import QuantumCircuit\n",
        "\n",
        "# Define the number of qubits\n",
        "num_qubits = 3  # You can change this value to any positive integer\n",
        "\n",
        "# Initialize the quantum circuit with n qubits\n",
        "qc = QuantumCircuit(num_qubits, num_qubits)\n",
        "\n",
        "# Apply the Hadamard gate to each qubit\n",
        "for qubit in range(num_qubits):\n",
        "    qc.h(qubit)\n",
        "\n",
        "# Visualize the quantum circuit\n",
        "qc.draw('mpl')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3HtgGl2RPqkH"
      },
      "source": [
        "###After applying the Hadamard gates, what is the probability of Alice being in any of the rooms?\n",
        "The Hadamard transformation on all qubits creates a uniform probability distribution over all possible states.\n",
        "This principle holds true regardless of the number of qubits  n ; as  n  increases, the probability of finding Alice in any specific room decreases exponentially \\frac{1}{2^n}."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K-jBDMzdQGup"
      },
      "source": [
        "## Task B1.2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-yXwWBfARYUB"
      },
      "outputs": [],
      "source": [
        "def apply_oracle(qc, target_state):\n",
        "    num_qubits = qc.num_qubits\n",
        "    # Apply X gates to qubits where target_state is '0'\n",
        "    for qubit in range(num_qubits):\n",
        "        if target_state[num_qubits - qubit - 1] == '0':\n",
        "            qc.x(qubit)\n",
        "    # Apply multi-controlled Z gate\n",
        "    qc.h(num_qubits - 1)\n",
        "    qc.mcx(list(range(num_qubits - 1)), num_qubits - 1)\n",
        "    qc.h(num_qubits - 1)\n",
        "    # Reverse the X gates\n",
        "    for qubit in range(num_qubits):\n",
        "        if target_state[num_qubits - qubit - 1] == '0':\n",
        "            qc.x(qubit)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gLujkezRRZzU"
      },
      "outputs": [],
      "source": [
        "target_state = '110'  # Binary representation of the marked room\n",
        "apply_oracle(qc, target_state)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HrCZzZ7fRchT",
        "outputId": "80f28de2-8f41-4cb4-906e-3626a95de467"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Statevector after applying the oracle:\n",
            "Statevector([ 0.35355339+0.00000000e+00j,  0.35355339+0.00000000e+00j,\n",
            "              0.35355339-4.32978028e-17j,  0.35355339+0.00000000e+00j,\n",
            "              0.35355339+0.00000000e+00j,  0.35355339+0.00000000e+00j,\n",
            "             -0.35355339+4.32978028e-17j,  0.35355339+0.00000000e+00j],\n",
            "            dims=(2, 2, 2))\n"
          ]
        }
      ],
      "source": [
        "from qiskit import transpile\n",
        "from qiskit_aer import AerSimulator\n",
        "from qiskit.visualization import plot_state_qsphere\n",
        "import matplotlib.pyplot as plt\n",
        "from qiskit.quantum_info import Statevector\n",
        "\n",
        "simulator = AerSimulator()\n",
        "qc.save_statevector()\n",
        "\n",
        "job = simulator.run(transpile(qc, simulator))\n",
        "result = job.result()\n",
        "statevector = result.get_statevector(qc)\n",
        "\n",
        "print(\"Statevector after applying the oracle:\")\n",
        "print(statevector)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "amoW2R9gRoA9",
        "outputId": "7a47b80a-890a-4f51-ee1c-00e3ebe78272"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-7323f4bfa4d9>:6: DeprecationWarning: The return type of saved statevectors has been changed from a `numpy.ndarray` to a `qiskit.quantum_info.Statevector` as of qiskit-aer 0.10. Accessing numpy array attributes is deprecated and will result in an error in a future release. To continue using saved result objects as arrays you can explicitly cast them using  `np.asarray(object)`.\n",
            "  n_states = len(statevector)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x200 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "# Retrieve the statevector\n",
        "statevector = result.get_statevector(qc)\n",
        "# Plot the quantum states using circle notation\n",
        "plot_circle_notation(statevector, num_qubits)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WZTRTySrVYXR"
      },
      "source": [
        "## Task B1.3: Amplifying the Probability of the Key Room"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "n4FdWGD-VUtY"
      },
      "outputs": [],
      "source": [
        "# Define the diffusion operator function\n",
        "def apply_diffusion_operator(qc):\n",
        "    # Apply Hadamard gates to all qubits\n",
        "    qc.h(range(num_qubits))\n",
        "    # Apply X gates to all qubits\n",
        "    qc.x(range(num_qubits))\n",
        "    # Apply multi-controlled Z gate\n",
        "    qc.h(num_qubits - 1)  # Hadamard gate to change basis\n",
        "    qc.mcx(list(range(num_qubits - 1)), num_qubits - 1)  # Multi-controlled X gate\n",
        "    qc.h(num_qubits - 1)  # Hadamard gate to revert basis\n",
        "    # Apply X gates to all qubits\n",
        "    qc.x(range(num_qubits))\n",
        "    # Apply Hadamard gates to all qubits\n",
        "    qc.h(range(num_qubits))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 481
        },
        "id": "R_q9Ig1VW7oF",
        "outputId": "bc6c0127-d958-4a9a-92f2-20b1ea968355"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Measurement results:\n",
            "{'001': 27, '011': 26, '111': 27, '101': 35, '100': 29, '000': 36, '010': 37, '110': 807}\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "from qiskit.visualization import plot_histogram\n",
        "\n",
        "# Apply the diffusion operator\n",
        "apply_diffusion_operator(qc)\n",
        "\n",
        "# Measure the qubits\n",
        "qc.measure(range(num_qubits), range(num_qubits))\n",
        "\n",
        "simulator = AerSimulator()\n",
        "\n",
        "\n",
        "job = simulator.run(transpile(qc, simulator))\n",
        "result = job.result()\n",
        "\n",
        "# Get the measurement results\n",
        "counts = result.get_counts(qc)\n",
        "print(\"Measurement results:\")\n",
        "print(counts)\n",
        "\n",
        "# Visualize the results\n",
        "plot_histogram(counts)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q7vVrkQeZB7k"
      },
      "source": [
        "The expected probability is approximately 77.9% after 1 iteration. The measured probability (77% (788/1024)) closely matches the theoretical probability (~77.9%)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t24d2HDPZS89"
      },
      "source": [
        "### How many iterations of amplitude amplification would be optimal for  rooms?\n",
        "Given  N  rooms, the optimal number of iterations is calculated as followed:\n",
        "\n",
        "\t1.\tCompute the Square Root of  N :\n",
        "\n",
        "\\sqrt{N}\n",
        "\n",
        "\t2.\tMultiply by  \\frac{\\pi}{4} :\n",
        "\n",
        "\\frac{\\pi}{4} \\sqrt{N}\n",
        "\n",
        "\t3.\tTake the Floor of the Result:\n",
        "\n",
        "k = \\left\\lfloor \\frac{\\pi}{4} \\sqrt{N} \\right\\rfloor\n",
        "\n",
        "Therefore, for  N = 8 , performing 2 iterations is optimal.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ayB3oSFDazFK",
        "outputId": "33e68d41-aac3-44aa-f3db-c8ce674e9ed9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ],
      "source": [
        "import math\n",
        "\n",
        "def optimal_iterations(N):\n",
        "    k = math.floor((math.pi / 4) * math.sqrt(N))\n",
        "    return k\n",
        "# Define the number of iterations\n",
        "k = optimal_iterations(2**num_qubits)  # Use the function from earlier to compute k\n",
        "\n",
        "print(k)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PBPm2kX_aVay"
      },
      "source": [
        "## B1.4: Escaping the Quantum Maze - Running Grover’s Algorithm\n",
        "Here is the full implementation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 820
        },
        "id": "CrYNmPKbaRcY",
        "outputId": "16f9749f-68e6-45ed-bb49-50beb2b5d956"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-7323f4bfa4d9>:6: DeprecationWarning: The return type of saved statevectors has been changed from a `numpy.ndarray` to a `qiskit.quantum_info.Statevector` as of qiskit-aer 0.10. Accessing numpy array attributes is deprecated and will result in an error in a future release. To continue using saved result objects as arrays you can explicitly cast them using  `np.asarray(object)`.\n",
            "  n_states = len(statevector)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x200 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Statevector after applying the oracle:\n",
            "Statevector([0.+0.00000000e+00j, 0.+0.00000000e+00j, 0.-0.00000000e+00j,\n",
            "             0.+0.00000000e+00j, 0.+0.00000000e+00j, 0.+0.00000000e+00j,\n",
            "             1.+9.35184828e-16j, 0.+0.00000000e+00j],\n",
            "            dims=(2, 2, 2))\n",
            "Measurement results:\n",
            "{'000': 8, '010': 9, '101': 6, '011': 6, '111': 10, '001': 10, '100': 10, '110': 965}\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "# Initialize the quantum circuit\n",
        "qc = QuantumCircuit(num_qubits, num_qubits)\n",
        "\n",
        "# Apply Hadamard gates to all qubits to create a superposition\n",
        "qc.h(range(num_qubits))\n",
        "\n",
        "# Define your oracle and diffusion operator functions here\n",
        "# (assuming they are already defined as apply_oracle and apply_diffusion_operator)\n",
        "\n",
        "# Set the target state\n",
        "target_state = '110'  # Binary representation of the marked room\n",
        "\n",
        "# Apply k iterations of Grover's algorithm\n",
        "for _ in range(k):\n",
        "    # Apply the oracle\n",
        "    apply_oracle(qc, target_state)\n",
        "    # Apply the diffusion operator\n",
        "    apply_diffusion_operator(qc)\n",
        "\n",
        "# Measure the qubits\n",
        "qc.measure(range(num_qubits), range(num_qubits))\n",
        "\n",
        "# Simulate the circuit\n",
        "simulator = AerSimulator()\n",
        "qc.save_statevector()\n",
        "\n",
        "job = simulator.run(transpile(qc, simulator))\n",
        "result = job.result()\n",
        "statevector = result.get_statevector(qc)\n",
        "\n",
        "# Plot the quantum states using circle notation\n",
        "plot_circle_notation(statevector, num_qubits)\n",
        "\n",
        "print(\"Statevector after applying the oracle:\")\n",
        "print(statevector)\n",
        "\n",
        "# Get the measurement results\n",
        "counts = result.get_counts(qc)\n",
        "print(\"Measurement results:\")\n",
        "print(counts)\n",
        "\n",
        "# Visualize the results\n",
        "plot_histogram(counts)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o9THT5s6cLej"
      },
      "source": [
        "### After running the simulation, which room was measured most frequently? Did Alice find the room with the key?\n",
        "The room |6> was measured most frequently, which is also the room with the key, therefore it works."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "owXqbUNCc16I"
      },
      "source": [
        "## B1.5: Searching for Multiple Keys"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0JD9uKvbc3JG"
      },
      "outputs": [],
      "source": [
        "# Modify the oracle to accept a list of target states\n",
        "def apply_oracle(qc, target_states):\n",
        "    num_qubits = qc.num_qubits\n",
        "    for target_state in target_states:\n",
        "        # Apply X gates to qubits where target_state is '0'\n",
        "        for qubit in range(num_qubits):\n",
        "            if target_state[num_qubits - qubit - 1] == '0':\n",
        "                qc.x(qubit)\n",
        "        # Apply multi-controlled Z gate\n",
        "        qc.h(num_qubits - 1)\n",
        "        qc.mcx(list(range(num_qubits - 1)), num_qubits - 1)\n",
        "        qc.h(num_qubits - 1)\n",
        "        # Reverse the X gates\n",
        "        for qubit in range(num_qubits):\n",
        "            if target_state[num_qubits - qubit - 1] == '0':\n",
        "                qc.x(qubit)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XB38PEpFduBC"
      },
      "outputs": [],
      "source": [
        "# Define the diffusion operator function\n",
        "def apply_diffusion_operator(qc):\n",
        "    # Apply Hadamard gates to all qubits\n",
        "    qc.h(range(num_qubits))\n",
        "    # Apply X gates to all qubits\n",
        "    qc.x(range(num_qubits))\n",
        "    # Apply multi-controlled Z gate\n",
        "    qc.h(num_qubits - 1)\n",
        "    qc.mcx(list(range(num_qubits - 1)), num_qubits - 1)\n",
        "    qc.h(num_qubits - 1)\n",
        "    # Apply X gates to all qubits\n",
        "    qc.x(range(num_qubits))\n",
        "    # Apply Hadamard gates to all qubits\n",
        "    qc.h(range(num_qubits))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MvPPEEcXdv4f"
      },
      "outputs": [],
      "source": [
        "# Define the optimal number of iterations function\n",
        "def optimal_iterations(N, M):\n",
        "    # Calculate the optimal number of iterations\n",
        "    k = max(1, math.floor((math.pi / 4) * math.sqrt(N / M)))\n",
        "    return k"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "de_PT8urdx-l",
        "outputId": "a930d850-c630-478a-e9c4-4c110d8d50a3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimal number of iterations: 1\n"
          ]
        }
      ],
      "source": [
        "num_qubits = 3\n",
        "N = 2 ** num_qubits  # Total number of rooms\n",
        "\n",
        "# Define the target states (rooms with keys)\n",
        "target_states = ['110', '101']\n",
        "M = len(target_states)  # Number of marked states\n",
        "\n",
        "# Calculate the optimal number of iterations\n",
        "k = optimal_iterations(N, M)\n",
        "print(f\"Optimal number of iterations: {k}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jYUio08cd3G9",
        "outputId": "6199ad86-042c-433b-b7bc-837a81df7f35"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Iteration 1:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<qiskit.circuit.instructionset.InstructionSet at 0x79135c0e7310>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "\n",
        "# Initialize the quantum circuit with classical bits for measurement\n",
        "qc = QuantumCircuit(num_qubits, num_qubits)\n",
        "\n",
        "# Apply Hadamard gates to create a uniform superposition\n",
        "qc.h(range(num_qubits))\n",
        "\n",
        "# Apply k iterations of Grover's algorithm\n",
        "# Loop over the iterations\n",
        "for iteration in range(k):\n",
        "\n",
        "    print(f\"\\nIteration {iteration + 1}:\")\n",
        "    # Apply the oracle\n",
        "    apply_oracle(qc, target_states)\n",
        "\n",
        "    # Save the statevector after the oracle\n",
        "    qc.save_statevector(label=f'state_after_oracle_{iteration}')\n",
        "\n",
        "    # Apply the diffusion operator\n",
        "    apply_diffusion_operator(qc)\n",
        "\n",
        "# Measure all qubits\n",
        "qc.measure(range(num_qubits), range(num_qubits))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lUhUmNIjeDYp",
        "outputId": "35698df8-34f9-4c30-eb08-2d55391f7fdb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Statevector after oracle in iteration 1:\n",
            "Statevector([ 0.35355339+0.00000000e+00j,  0.35355339-4.32978028e-17j,\n",
            "              0.35355339-4.32978028e-17j,  0.35355339+0.00000000e+00j,\n",
            "              0.35355339+0.00000000e+00j, -0.35355339+4.32978028e-17j,\n",
            "             -0.35355339+4.32978028e-17j,  0.35355339+0.00000000e+00j],\n",
            "            dims=(2, 2, 2))\n",
            "Measurement results:\n",
            "{'110': 504, '101': 520}\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "# Simulate the circuit\n",
        "simulator = AerSimulator()\n",
        "qc.save_statevector()\n",
        "\n",
        "job = simulator.run(transpile(qc, simulator))\n",
        "result = job.result()\n",
        "statevector = result.get_statevector(qc)\n",
        "\n",
        "# Retrieve and print the statevectors after each oracle (optional)\n",
        "for iteration in range(k):\n",
        "    state_after_oracle = result.data(0)[f'state_after_oracle_{iteration}']\n",
        "    print(f\"\\nStatevector after oracle in iteration {iteration + 1}:\")\n",
        "    print(state_after_oracle)\n",
        "\n",
        "# Get the measurement results\n",
        "counts = result.get_counts(qc)\n",
        "print(\"Measurement results:\")\n",
        "print(counts)\n",
        "\n",
        "# Visualize the results\n",
        "plot_histogram(counts)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "15Feimo1ghCR"
      },
      "source": [
        "### What do you observe in the measurement results when searching for two keys? Does Grover’s algorithm still provide an advantage?\n",
        "\n",
        "1. Only the two marked states, ‘101’ and ‘110’, were measured. Only the two marked states, ‘101’ and ‘110’, were measured.\n",
        "\n",
        "Yes, Grover’s algorithm provides a significant advantage even when searching for multiple keys.\n",
        "\n",
        "The algorithm reduces the number of steps (queries) required to find a marked state from  O\\left( \\frac{N}{M} \\right)  in classical search to  O\\left( \\sqrt{\\frac{N}{M}} \\right)  in quantum search."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jF1kIHq4mbup"
      },
      "source": [
        "# Bonus Exercise II - Solving Linear Systems with the HHL Algorithm\n",
        "The HHL algorithm follows these steps:\n",
        "\n",
        "1. Represent the vector b as a quantum state.\n",
        "2. Perform quantum phase estimation (QPE) on the matrix  A to find its eigenvalues.\n",
        "3. Apply controlled rotations based on the eigenvalues.\n",
        "4. Use the inverse of QPE and measure the quantum state to obtain the solution x."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aWlg-DBqmjqj"
      },
      "source": [
        "## Part 1 - Implementing the HHL algorithm in Qiskit\n",
        "Now, it's time to implement the HHL algorithm! We’ll focus on solving a simple 2x2 linear system of equations using Qiskit.\n",
        "\n",
        "We will solve the system: $Ax = b$\n",
        "\n",
        "where: $A=\\begin{pmatrix} 2 & -1\\\\ -1 & 3 \\end{pmatrix}$\n",
        "and $b=\\begin{pmatrix} 1\\\\ 0 \\end{pmatrix}$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SEsVCP7PmvIH"
      },
      "source": [
        "### 1. Prepare the Input State\n",
        "Use Qiskit to prepare the quantum state b. This can be represented by initializing the qubits accordingly."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "id": "UUj0cw7xJZzb",
        "outputId": "f4232fd2-6fb5-4b53-9e15-95dcc182beea"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        \n",
              "q_0: ───────────────────\n",
              "                        \n",
              "q_1: ───────────────────\n",
              "                        \n",
              "q_2: ───────────────────\n",
              "     ┌─────────────────┐\n",
              "q_3: ┤ Initialize(1,0) ├\n",
              "     └─────────────────┘\n",
              "c: 3/═══════════════════\n",
              "                        "
            ],
            "text/html": [
              "<pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">                        \n",
              "q_0: ───────────────────\n",
              "                        \n",
              "q_1: ───────────────────\n",
              "                        \n",
              "q_2: ───────────────────\n",
              "     ┌─────────────────┐\n",
              "q_3: ┤ Initialize(1,0) ├\n",
              "     └─────────────────┘\n",
              "c: 3/═══════════════════\n",
              "                        </pre>"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ],
      "source": [
        "def prepare_input_state(b, num_ancilla=3):\n",
        "\n",
        "    # Create a quantum circuit\n",
        "    qc = QuantumCircuit(num_ancilla + 1, num_ancilla) # 1 qubit for b\n",
        "\n",
        "    # Initialize the quantum state based on b\n",
        "    qc.initialize([b[0], b[1]], num_ancilla, normalize=True)\n",
        "\n",
        "    return qc\n",
        "\n",
        "# Define the vector b\n",
        "b = np.array([1, 0])\n",
        "\n",
        "# Define the number of ancilla qubits\n",
        "num_ancilla = 3\n",
        "\n",
        "qc = prepare_input_state(b, num_ancilla=num_ancilla)\n",
        "qc.draw()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2hhCvF2lm_pP"
      },
      "source": [
        "### 2. Quantum Phase Estimation (QPE)\n",
        "Implement the QPE part of the HHL algorithm on matrix A. You may use controlled unitary operations and ancilla qubits to perform the phase estimation."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DzDzIzmuKY7A",
        "outputId": "f1c637f3-ae10-4ccb-de0e-09c404f8a0d9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unitary Matrix U = \n",
            " [[0.76720251+0.5606113j 0.22263263-0.2180596j]\n",
            " [0.22263263-0.2180596j 0.54456989+0.7786709j]]\n"
          ]
        }
      ],
      "source": [
        "from scipy.linalg import expm\n",
        "from scipy.linalg import ishermitian\n",
        "\n",
        "def hermitian_to_unitary(A):\n",
        "    # Check if A is hermitian\n",
        "    if not ishermitian(A):\n",
        "        raise ValueError(\"Matrix A must be Hermitian.\")\n",
        "\n",
        "    # Compute the unitary operator U = exp(i*A*t) out of hermitian matrix\n",
        "    t = 1/np.pi  # Scaling factor to ensure phases are within [0,1) and distinct\n",
        "    U = expm(1j * A * t)\n",
        "\n",
        "    # Verify that U is unitary\n",
        "    if not np.allclose(U.conj().T @ U, np.eye(len(A))):\n",
        "        raise ValueError(\"Matrix U is not unitary.\")\n",
        "\n",
        "    return U\n",
        "\n",
        "# Define the matrix A\n",
        "A = np.array([[2, -1],\n",
        "              [-1, 3]])\n",
        "\n",
        "U = hermitian_to_unitary(A)\n",
        "print('Unitary Matrix U = \\n', U)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "id": "5-wdR94keS7u",
        "outputId": "dd94ea23-bda6-4459-c72a-ca7761c46ac1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            ┌───┐                                        ┌───────┐\n",
              "q_0: ───────┤ H ├────────────■───────────────────────────┤0      ├\n",
              "            ├───┤            │                           │       │\n",
              "q_1: ───────┤ H ├────────────┼──────────■────────────────┤1 IQFT ├\n",
              "            ├───┤            │          │                │       │\n",
              "q_2: ───────┤ H ├────────────┼──────────┼──────────■─────┤2      ├\n",
              "     ┌──────┴───┴──────┐┌────┴────┐┌────┴────┐┌────┴────┐└───────┘\n",
              "q_3: ┤ Initialize(1,0) ├┤ Unitary ├┤ Unitary ├┤ Unitary ├─────────\n",
              "     └─────────────────┘└─────────┘└─────────┘└─────────┘         \n",
              "c: 3/═════════════════════════════════════════════════════════════\n",
              "                                                                  "
            ],
            "text/html": [
              "<pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">            ┌───┐                                        ┌───────┐\n",
              "q_0: ───────┤ H ├────────────■───────────────────────────┤0      ├\n",
              "            ├───┤            │                           │       │\n",
              "q_1: ───────┤ H ├────────────┼──────────■────────────────┤1 IQFT ├\n",
              "            ├───┤            │          │                │       │\n",
              "q_2: ───────┤ H ├────────────┼──────────┼──────────■─────┤2      ├\n",
              "     ┌──────┴───┴──────┐┌────┴────┐┌────┴────┐┌────┴────┐└───────┘\n",
              "q_3: ┤ Initialize(1,0) ├┤ Unitary ├┤ Unitary ├┤ Unitary ├─────────\n",
              "     └─────────────────┘└─────────┘└─────────┘└─────────┘         \n",
              "c: 3/═════════════════════════════════════════════════════════════\n",
              "                                                                  </pre>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ],
      "source": [
        "from qiskit.circuit.library import QFT\n",
        "from qiskit.circuit.library import UnitaryGate\n",
        "\n",
        "def quantum_phase_estimation(A, b, num_ancilla=3):\n",
        "\n",
        "    # Ensure the input is a 2D matrix of size 2x2\n",
        "    if A.shape != (2, 2):\n",
        "        raise ValueError(\"The input matrix must be 2x2.\")\n",
        "\n",
        "    # Convert the matrix into a unitary\n",
        "    U = hermitian_to_unitary(A)\n",
        "\n",
        "    # Create a quantum circuit prepared in initial state based on b\n",
        "    qc = prepare_input_state(b, num_ancilla=num_ancilla)\n",
        "\n",
        "    # Step 1: Apply Hadamard gates to the ancilla qubits\n",
        "    qc.h(range(num_ancilla))\n",
        "\n",
        "    # Step 2: Apply controlled unitary operations\n",
        "    for qubit in range(num_ancilla):\n",
        "        exponent = 2 ** qubit\n",
        "        controlled_unitary = UnitaryGate(np.linalg.matrix_power(U, exponent)).control()  # Controlled U^(2^exponent)\n",
        "        qc.append(controlled_unitary, [qubit, num_ancilla])\n",
        "\n",
        "    # Step 3: Apply Inverse Quantum Fourier Transform (QFT) to the ancilla qubits\n",
        "    qc.append(QFT(num_ancilla, inverse=True).to_gate(), range(num_ancilla))\n",
        "\n",
        "    return qc\n",
        "\n",
        "\n",
        "# Generate the Quantum Phase Estimation circuit for this matrix\n",
        "qc = quantum_phase_estimation(A, b, num_ancilla=num_ancilla)\n",
        "qc.draw()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 463
        },
        "id": "CI73ooZBniMp",
        "outputId": "e22a73f8-4b47-46db-b514-aa5f1c45c940"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Measurement results: {'101': 14, '110': 13, '100': 21, '111': 38, '011': 40, '001': 536, '010': 133, '000': 229}\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 68
        }
      ],
      "source": [
        "# Measure the ancilla qubits to extract phase information\n",
        "qc.measure(range(num_ancilla), range(num_ancilla))\n",
        "\n",
        "# Simulate the circuit using the Aer simulator\n",
        "simulator = AerSimulator()\n",
        "job = simulator.run(transpile(qc, simulator), shots=1024)\n",
        "result = job.result()\n",
        "\n",
        "# Print the measurement results\n",
        "counts = result.get_counts(qc)\n",
        "print(f\"Measurement results: {counts}\")\n",
        "\n",
        "# Plot the histogram\n",
        "plot_histogram(counts)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "owYyU3Ths2l7",
        "outputId": "509e4908-6c06-4604-ff37-8fb097df93d0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Measured: 001, Phase: 0.500, Eigenvalue estimate: 3.142\n",
            "Measured: 000, Phase: 0.000, Eigenvalue estimate: 0.000\n"
          ]
        }
      ],
      "source": [
        "# Get the two largest values from the measurement result\n",
        "top_two_results = sorted(counts.items(), key=lambda x: x[1], reverse=True)[:2]\n",
        "\n",
        "#Convert measured outcomes to phases and then to eigenvalues\n",
        "eigenvalues = []\n",
        "for measurement, count in top_two_results:\n",
        "    # Convert binary measurement to phase\n",
        "    phase = sum(int(bit) * (1 / (2 ** (index + 1))) for index, bit in enumerate(reversed(measurement)))\n",
        "    eigenvalue_estimate = 2 * np.pi * phase  # Scale to [0, 2π]\n",
        "\n",
        "    # Since U = e^(i*λ), we can recover λ\n",
        "    eigenvalue = np.angle(np.exp(1j * eigenvalue_estimate))\n",
        "    print(f\"Measured: {measurement}, Phase: {phase:.3f}, Eigenvalue estimate: {eigenvalue:.3f}\")\n",
        "\n",
        "    eigenvalues.append(eigenvalue)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FT0qbeS7nZNn"
      },
      "source": [
        "### 3. Controlled Rotation\n",
        "Implement the controlled rotation in Qiskit based on the eigenvalues obtained from QPE."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "XgH8Oc4kB-FC",
        "outputId": "69e9d1cf-456e-4a44-c168-4528f86dd232"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            ┌───┐                                        ┌───────┐┌─┐      »\n",
              "q_0: ───────┤ H ├────────────■───────────────────────────┤0      ├┤M├──────»\n",
              "            ├───┤            │                           │       │└╥┘┌─┐   »\n",
              "q_1: ───────┤ H ├────────────┼──────────■────────────────┤1 IQFT ├─╫─┤M├───»\n",
              "            ├───┤            │          │                │       │ ║ └╥┘┌─┐»\n",
              "q_2: ───────┤ H ├────────────┼──────────┼──────────■─────┤2      ├─╫──╫─┤M├»\n",
              "     ┌──────┴───┴──────┐┌────┴────┐┌────┴────┐┌────┴────┐└───────┘ ║  ║ └╥┘»\n",
              "q_3: ┤ Initialize(1,0) ├┤ Unitary ├┤ Unitary ├┤ Unitary ├──────────╫──╫──╫─»\n",
              "     └─────────────────┘└─────────┘└─────────┘└─────────┘          ║  ║  ║ »\n",
              "c: 3/══════════════════════════════════════════════════════════════╩══╩══╩═»\n",
              "                                                                   0  1  2 »\n",
              "«              \n",
              "«q_0: ────■────\n",
              "«         │    \n",
              "«q_1: ────┼────\n",
              "«         │    \n",
              "«q_2: ────┼────\n",
              "«     ┌───┴───┐\n",
              "«q_3: ┤ Rz(2) ├\n",
              "«     └───────┘\n",
              "«c: 3/═════════\n",
              "«              "
            ],
            "text/html": [
              "<pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">            ┌───┐                                        ┌───────┐┌─┐      »\n",
              "q_0: ───────┤ H ├────────────■───────────────────────────┤0      ├┤M├──────»\n",
              "            ├───┤            │                           │       │└╥┘┌─┐   »\n",
              "q_1: ───────┤ H ├────────────┼──────────■────────────────┤1 IQFT ├─╫─┤M├───»\n",
              "            ├───┤            │          │                │       │ ║ └╥┘┌─┐»\n",
              "q_2: ───────┤ H ├────────────┼──────────┼──────────■─────┤2      ├─╫──╫─┤M├»\n",
              "     ┌──────┴───┴──────┐┌────┴────┐┌────┴────┐┌────┴────┐└───────┘ ║  ║ └╥┘»\n",
              "q_3: ┤ Initialize(1,0) ├┤ Unitary ├┤ Unitary ├┤ Unitary ├──────────╫──╫──╫─»\n",
              "     └─────────────────┘└─────────┘└─────────┘└─────────┘          ║  ║  ║ »\n",
              "c: 3/══════════════════════════════════════════════════════════════╩══╩══╩═»\n",
              "                                                                   0  1  2 »\n",
              "«              \n",
              "«q_0: ────■────\n",
              "«         │    \n",
              "«q_1: ────┼────\n",
              "«         │    \n",
              "«q_2: ────┼────\n",
              "«     ┌───┴───┐\n",
              "«q_3: ┤ Rz(2) ├\n",
              "«     └───────┘\n",
              "«c: 3/═════════\n",
              "«              </pre>"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ],
      "source": [
        "#########################################################################\n",
        "#eigenvalues = [1.38196601, 3.61803399] # classically calculated eigenvalues for testing\n",
        "#########################################################################\n",
        "\n",
        "def controlled_rotations(qc, eigenvalues, num_ancilla):\n",
        "    target_qubit = num_ancilla\n",
        "    for idx, eigenvalue in enumerate(eigenvalues):\n",
        "        if eigenvalue != 0:\n",
        "            angle = 2 * np.pi / eigenvalue  # Convert eigenvalue to angle for rotation\n",
        "            qc.crz(angle, idx, target_qubit)  # Apply controlled rotation (controlled RZ)\n",
        "    return qc\n",
        "\n",
        "\n",
        "qc = controlled_rotations(qc, eigenvalues, num_ancilla=num_ancilla)\n",
        "qc.draw()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CF20G66anhCe"
      },
      "source": [
        "### 4. Inverse QPE and Measurement\n",
        "Implement the inverse QPE and measure the qubits to extract the result."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "WTH_9Y5cB-lb",
        "outputId": "6e1e8190-873d-49c0-bf7a-0a81bd7c57ac"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            ┌───┐                                        ┌───────┐┌─┐      »\n",
              "q_0: ───────┤ H ├────────────■───────────────────────────┤0      ├┤M├──────»\n",
              "            ├───┤            │                           │       │└╥┘┌─┐   »\n",
              "q_1: ───────┤ H ├────────────┼──────────■────────────────┤1 IQFT ├─╫─┤M├───»\n",
              "            ├───┤            │          │                │       │ ║ └╥┘┌─┐»\n",
              "q_2: ───────┤ H ├────────────┼──────────┼──────────■─────┤2      ├─╫──╫─┤M├»\n",
              "     ┌──────┴───┴──────┐┌────┴────┐┌────┴────┐┌────┴────┐└───────┘ ║  ║ └╥┘»\n",
              "q_3: ┤ Initialize(1,0) ├┤ Unitary ├┤ Unitary ├┤ Unitary ├──────────╫──╫──╫─»\n",
              "     └─────────────────┘└─────────┘└─────────┘└─────────┘          ║  ║  ║ »\n",
              "c: 3/══════════════════════════════════════════════════════════════╩══╩══╩═»\n",
              "                                                                   0  1  2 »\n",
              "«              ┌──────┐                                      ┌───┐\n",
              "«q_0: ────■────┤0     ├────────────────────────────────■─────┤ H ├\n",
              "«         │    │      │                      ┌───┐     │     └───┘\n",
              "«q_1: ────┼────┤1 QFT ├────────────────■─────┤ H ├─────┼──────────\n",
              "«         │    │      │                │     ├───┤     │          \n",
              "«q_2: ────┼────┤2     ├─────■──────────┼─────┤ H ├─────┼──────────\n",
              "«     ┌───┴───┐└──────┘┌────┴────┐┌────┴────┐└───┘┌────┴────┐     \n",
              "«q_3: ┤ Rz(2) ├────────┤ Unitary ├┤ Unitary ├─────┤ Unitary ├─────\n",
              "«     └───────┘        └─────────┘└─────────┘     └─────────┘     \n",
              "«c: 3/════════════════════════════════════════════════════════════\n",
              "«                                                                 "
            ],
            "text/html": [
              "<pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">            ┌───┐                                        ┌───────┐┌─┐      »\n",
              "q_0: ───────┤ H ├────────────■───────────────────────────┤0      ├┤M├──────»\n",
              "            ├───┤            │                           │       │└╥┘┌─┐   »\n",
              "q_1: ───────┤ H ├────────────┼──────────■────────────────┤1 IQFT ├─╫─┤M├───»\n",
              "            ├───┤            │          │                │       │ ║ └╥┘┌─┐»\n",
              "q_2: ───────┤ H ├────────────┼──────────┼──────────■─────┤2      ├─╫──╫─┤M├»\n",
              "     ┌──────┴───┴──────┐┌────┴────┐┌────┴────┐┌────┴────┐└───────┘ ║  ║ └╥┘»\n",
              "q_3: ┤ Initialize(1,0) ├┤ Unitary ├┤ Unitary ├┤ Unitary ├──────────╫──╫──╫─»\n",
              "     └─────────────────┘└─────────┘└─────────┘└─────────┘          ║  ║  ║ »\n",
              "c: 3/══════════════════════════════════════════════════════════════╩══╩══╩═»\n",
              "                                                                   0  1  2 »\n",
              "«              ┌──────┐                                      ┌───┐\n",
              "«q_0: ────■────┤0     ├────────────────────────────────■─────┤ H ├\n",
              "«         │    │      │                      ┌───┐     │     └───┘\n",
              "«q_1: ────┼────┤1 QFT ├────────────────■─────┤ H ├─────┼──────────\n",
              "«         │    │      │                │     ├───┤     │          \n",
              "«q_2: ────┼────┤2     ├─────■──────────┼─────┤ H ├─────┼──────────\n",
              "«     ┌───┴───┐└──────┘┌────┴────┐┌────┴────┐└───┘┌────┴────┐     \n",
              "«q_3: ┤ Rz(2) ├────────┤ Unitary ├┤ Unitary ├─────┤ Unitary ├─────\n",
              "«     └───────┘        └─────────┘└─────────┘     └─────────┘     \n",
              "«c: 3/════════════════════════════════════════════════════════════\n",
              "«                                                                 </pre>"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ],
      "source": [
        "def inverse_quantum_phase_estimation(A, num_ancilla=3):\n",
        "\n",
        "    # Step 1: Apply Quantum Fourier Transform (QFT) to the ancilla qubits\n",
        "    qc.append(QFT(num_ancilla, inverse=False).to_gate(), range(num_ancilla))\n",
        "\n",
        "    # Step 2: Apply inverse of controlled unitary operations\n",
        "    U = hermitian_to_unitary(A)\n",
        "    for qubit in reversed(range(num_ancilla)):\n",
        "        exponent = 2 ** qubit\n",
        "        controlled_unitary_dagger = UnitaryGate(np.linalg.matrix_power(U, exponent).conj().T).control()  # Controlled U^(2^exponent) dagger\n",
        "        qc.append(controlled_unitary_dagger, [qubit, num_ancilla])\n",
        "\n",
        "    # Step 3: Apply Hadamard gates to the ancilla qubits\n",
        "    qc.h(range(num_ancilla))\n",
        "\n",
        "    return qc\n",
        "\n",
        "qc = inverse_quantum_phase_estimation(A, num_ancilla=num_ancilla)\n",
        "qc.draw()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MtPS9AmEnmZh"
      },
      "source": [
        "## Part 2: Analyze and Compare Results\n",
        "Now that you’ve implemented the HHL algorithm, it's time to compare the quantum solution with the classical one."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_U-IcrAspk8O"
      },
      "source": [
        "### Classical Solution\n",
        "\n",
        "Solve the system $Ax=b$ using classical methods (e.g., numpy's linear algebra solver)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2bgqH4MVYdzG",
        "outputId": "5cff6314-13d3-4fe8-b547-24159aa67feb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Eigenvalues of A: [1.38196601 3.61803399]\n",
            "Eigenvectors of A:\n",
            " [[-0.85065081 -0.52573111]\n",
            " [-0.52573111  0.85065081]]\n",
            "Solution x = \n",
            " [0.6 0.2]\n"
          ]
        }
      ],
      "source": [
        "# Compute eigenvalues and eigenvectors of A\n",
        "eigenvalues, eigenvectors = np.linalg.eigh(A)\n",
        "print(\"Eigenvalues of A:\", eigenvalues)\n",
        "print(\"Eigenvectors of A:\\n\", eigenvectors)\n",
        "\n",
        "# Solve for x in the equation Ax = b\n",
        "x = np.linalg.solve(A, b)\n",
        "print(\"Solution x = \\n\", x)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jiG4KBnQpl3n"
      },
      "source": [
        "### Quantum Solution\n",
        "\n",
        "Run your quantum circuit in Qiskit and extract the result from the measurement."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aKlFD3jVAib0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "outputId": "07de97c5-0e01-45c3-c66e-49e0028beb95"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classical solution: [0.6 0.2]\n",
            "Scaled quantum solution vector: [0.51968785 0.36045046]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 73
        }
      ],
      "source": [
        "from qiskit.quantum_info import partial_trace, Statevector\n",
        "\n",
        "\n",
        "# Save the statevector and measure ancilla qubits\n",
        "qc.save_statevector()\n",
        "qc.measure(range(num_ancilla), range(num_ancilla))\n",
        "\n",
        "# Simulate the circuit\n",
        "simulator = AerSimulator()\n",
        "job = simulator.run(transpile(qc, simulator))\n",
        "result = job.result()\n",
        "\n",
        "# Extract the statevector of the full system (data + ancilla qubits)\n",
        "statevector = result.get_statevector(qc)\n",
        "#print(\"Full statevector:\", statevector)\n",
        "\n",
        "# Trace out the ancilla qubits to isolate the data qubits\n",
        "data_qubits_state = partial_trace(statevector, range(num_ancilla))\n",
        "\n",
        "# Extract the amplitudes from the density matrix\n",
        "# Diagonal elements represent |alpha_0|^2 and |alpha_1|^2\n",
        "rho_00 = data_qubits_state.data[0, 0]  # Diagonal element |0><0|\n",
        "rho_11 = data_qubits_state.data[1, 1]  # Diagonal element |1><1|\n",
        "rho_01 = data_qubits_state.data[0, 1]  # Off-diagonal element |0><1| (used for phase)\n",
        "\n",
        "# Compute the amplitudes for |0> and |1> based on the diagonal elements\n",
        "alpha_0 = np.sqrt(np.real(rho_00))\n",
        "alpha_1 = np.sqrt(np.real(rho_11))\n",
        "\n",
        "# Reconstruct the pure statevector (ignoring any phases for now)\n",
        "statevector_x = np.array([alpha_0, alpha_1])\n",
        "\n",
        "# Classical solution (for comparison and normalization)\n",
        "x_classical = np.linalg.solve(A, b)\n",
        "print(\"Classical solution:\", x_classical)\n",
        "\n",
        "# Compute the norms of the quantum and classical solutions\n",
        "norm_classical = np.linalg.norm(x_classical)\n",
        "norm_quantum = np.linalg.norm(statevector_x)\n",
        "\n",
        "# Scale the quantum solution to match the classical solution's norm\n",
        "scaled_solution = (norm_classical / norm_quantum) * statevector_x\n",
        "\n",
        "print(\"Scaled quantum solution vector:\", scaled_solution)\n",
        "\n",
        "# Get the measurement results (counts)\n",
        "counts = result.get_counts(qc)\n",
        "\n",
        "plot_histogram(counts)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xKz4GpBGpm89"
      },
      "source": [
        "### Comparison\n",
        "Compare the quantum result with the classical result. How accurate is the quantum solution? What challenges did you face in implementing the HHL algorithm?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R4u6XQ68Y26B"
      },
      "source": [
        "The classical solution is [0.6 0.2] and our HHL implementation finds a solution that is close ([0.51968785 0.36045046]).\n",
        "\n",
        "We found it challanging to figure out how to interpret the measurement results in order to obtain the eigenvalues from the measurement.\n",
        "We expected that the obtained eigenvalues are similar to the classically calculated eigenvalues with the precision increasing proportional to the number of ancilla qubits. However, we measured completely different eigenvalues depending on the number of ancilla qubits."
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}